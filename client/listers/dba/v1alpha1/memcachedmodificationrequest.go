/*
Copyright The KubeDB Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubedb.dev/apimachinery/apis/dba/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MemcachedModificationRequestLister helps list MemcachedModificationRequests.
type MemcachedModificationRequestLister interface {
	// List lists all MemcachedModificationRequests in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.MemcachedModificationRequest, err error)
	// MemcachedModificationRequests returns an object that can list and get MemcachedModificationRequests.
	MemcachedModificationRequests(namespace string) MemcachedModificationRequestNamespaceLister
	MemcachedModificationRequestListerExpansion
}

// memcachedModificationRequestLister implements the MemcachedModificationRequestLister interface.
type memcachedModificationRequestLister struct {
	indexer cache.Indexer
}

// NewMemcachedModificationRequestLister returns a new MemcachedModificationRequestLister.
func NewMemcachedModificationRequestLister(indexer cache.Indexer) MemcachedModificationRequestLister {
	return &memcachedModificationRequestLister{indexer: indexer}
}

// List lists all MemcachedModificationRequests in the indexer.
func (s *memcachedModificationRequestLister) List(selector labels.Selector) (ret []*v1alpha1.MemcachedModificationRequest, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MemcachedModificationRequest))
	})
	return ret, err
}

// MemcachedModificationRequests returns an object that can list and get MemcachedModificationRequests.
func (s *memcachedModificationRequestLister) MemcachedModificationRequests(namespace string) MemcachedModificationRequestNamespaceLister {
	return memcachedModificationRequestNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MemcachedModificationRequestNamespaceLister helps list and get MemcachedModificationRequests.
type MemcachedModificationRequestNamespaceLister interface {
	// List lists all MemcachedModificationRequests in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.MemcachedModificationRequest, err error)
	// Get retrieves the MemcachedModificationRequest from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.MemcachedModificationRequest, error)
	MemcachedModificationRequestNamespaceListerExpansion
}

// memcachedModificationRequestNamespaceLister implements the MemcachedModificationRequestNamespaceLister
// interface.
type memcachedModificationRequestNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MemcachedModificationRequests in the indexer for a given namespace.
func (s memcachedModificationRequestNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MemcachedModificationRequest, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MemcachedModificationRequest))
	})
	return ret, err
}

// Get retrieves the MemcachedModificationRequest from the indexer for a given namespace and name.
func (s memcachedModificationRequestNamespaceLister) Get(name string) (*v1alpha1.MemcachedModificationRequest, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("memcachedmodificationrequest"), name)
	}
	return obj.(*v1alpha1.MemcachedModificationRequest), nil
}
