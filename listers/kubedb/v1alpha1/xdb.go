/*
Copyright 2017 The KubeDB Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/k8sdb/apimachinery/apis/kubedb/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// XdbLister helps list Xdbs.
type XdbLister interface {
	// List lists all Xdbs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Xdb, err error)
	// Xdbs returns an object that can list and get Xdbs.
	Xdbs(namespace string) XdbNamespaceLister
	XdbListerExpansion
}

// xdbLister implements the XdbLister interface.
type xdbLister struct {
	indexer cache.Indexer
}

// NewXdbLister returns a new XdbLister.
func NewXdbLister(indexer cache.Indexer) XdbLister {
	return &xdbLister{indexer: indexer}
}

// List lists all Xdbs in the indexer.
func (s *xdbLister) List(selector labels.Selector) (ret []*v1alpha1.Xdb, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Xdb))
	})
	return ret, err
}

// Xdbs returns an object that can list and get Xdbs.
func (s *xdbLister) Xdbs(namespace string) XdbNamespaceLister {
	return xdbNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// XdbNamespaceLister helps list and get Xdbs.
type XdbNamespaceLister interface {
	// List lists all Xdbs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Xdb, err error)
	// Get retrieves the Xdb from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Xdb, error)
	XdbNamespaceListerExpansion
}

// xdbNamespaceLister implements the XdbNamespaceLister
// interface.
type xdbNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Xdbs in the indexer for a given namespace.
func (s xdbNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Xdb, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Xdb))
	})
	return ret, err
}

// Get retrieves the Xdb from the indexer for a given namespace and name.
func (s xdbNamespaceLister) Get(name string) (*v1alpha1.Xdb, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("xdb"), name)
	}
	return obj.(*v1alpha1.Xdb), nil
}
